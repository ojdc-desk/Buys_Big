unit DmGestion;

interface

uses
  System.SysUtils, System.Classes, Data.DB, Data.Win.ADODB, Control_Gestion;

type
  TDmGestion_Data = class(TDataModule)
    QryClientes: TADOQuery;
    QryProductos: TADOQuery;
    QryClientesCLIENTE: TBCDField;
    QryClientesNOMBRE_CLIENTE: TStringField;
    QryClientesSEXO: TStringField;
    QryClientesFECHA_NACIMIENTO: TDateField;
    QryClientesNUM_DEPARTAMENTO: TStringField;
    QryClientesNUM_CIUDAD: TStringField;
    QryClientesDIRECCION: TStringField;
    QryClientesNUM_TELEFONICO: TBCDField;
    QryProductosPRODUCTO: TStringField;
    QryProductosCATEGORIA: TStringField;
    QryProductosNOMBRE_PRODUCTO: TStringField;
    QryProductosVALOR: TFloatField;
    QryCiudades: TADOQuery;
    DsDepartamento: TDataSource;
    DsCiudades: TDataSource;
    QryDepartamentos: TADOQuery;
    QryDepartamentosNUM_DEPARTAMENTO: TStringField;
    QryDepartamentosNOMBRE_DEPARTAMENTO: TStringField;
    QryCiudadesNUM_DEPARTAMENTO: TStringField;
    QryCiudadesNUM_CIUDAD: TStringField;
    QryCiudadesNOMBRE_CIUDAD: TStringField;
    QryCiudadesCLAVE: TStringField;
    QryCategorias: TADOQuery;
    DsCategorias: TDataSource;
    QryCategoriasCATEGORIA: TStringField;
    QryCategoriasNOMBRE_CATEGORIA: TStringField;
    QryCuentaProductos: TADOQuery;
    QryCuentaProductosCANT_PRODUCTOS: TIntegerField;
    DsProductos: TDataSource;
    QryCabezaFactura: TADOQuery;
    IntegerField1: TIntegerField;
    QryDetalleFactura: TADOQuery;
    IntegerField2: TIntegerField;
  private
    { Private declarations }
  public
    Public Function RegistrarClienteBD(Datos:TControl_Gestion;Actividad:String):Currency;
    Public Function ValidarClienteBD(Datos:TControl_Gestion;Cliente_Id:Currency):Boolean;

    Public Function RegistrarProducto(Datos:TControl_Gestion;Actividad:String):Currency;
    Public Function ValidarProdcutoBD(Datos:TControl_Gestion;Producto_Id:String):Boolean;
    { Public declarations }
  end;
var
  DmGestion_Data: TDmGestion_Data;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses DmConnectionDB;

{$R *.dfm}
//*** Validacion de un Cliente en la base de datos.
Function TDmGestion_Data.ValidarClienteBD(Datos:TControl_Gestion;Cliente_Id:Currency):Boolean;
begin
    QryClientes.Close;
    QryClientes.Parameters[0].Value := Cliente_Id;
    QryClientes.Open;

    If ( QryClientes.RecordCount = 1 ) Then
     Begin
         Datos.Clie_Identificacion  := QryClientesCLIENTE.Value;
         Datos.Clie_Nombre          := QryClientesNOMBRE_CLIENTE.Value;
         Datos.Clie_Sexo            := QryClientesSEXO.Value;
         Datos.Clie_FechaNacimiento := QryClientesFECHA_NACIMIENTO.Value;
         Datos.Clie_Departamento    := QryClientesNUM_DEPARTAMENTO.Value;
         Datos.Clie_Municipio       := QryClientesNUM_CIUDAD.Value;
         Datos.Clie_Direccion       := QryClientesDIRECCION.Value;
         Datos.Clie_Telefono        := QryClientesNUM_TELEFONICO.Value;
         Result                     := True;
     End
       Else
          Begin Result := False; End;
end;

//*** Registro de un Cliente en la base de datos.
Function TDmGestion_Data.RegistrarClienteBD(Datos:TControl_Gestion;Actividad:String):Currency;
begin
   Try
     DmConexion.AdoConexionBd.BeginTrans;
     QryClientes.Close;
     QryClientes.Parameters[0].Value := Datos.Clie_Identificacion;
     QryClientes.Open;

     If ( Actividad = 'REGISTRAR CLIENTE' ) Then
      Begin
         QryClientes.Insert;
         QryClientesCLIENTE.Value          :=  Datos.Clie_Identificacion;
      End Else Begin  QryClientes.Edit;  End;
         QryClientesNOMBRE_CLIENTE.Value   := UpperCase(Datos.Clie_Nombre);
         QryClientesSEXO.Value             := Datos.Clie_Sexo;
         QryClientesFECHA_NACIMIENTO.Value := Datos.Clie_FechaNacimiento;
         QryClientesNUM_DEPARTAMENTO.Value := Datos.Clie_Departamento;
         QryClientesNUM_CIUDAD.Value       := Datos.Clie_Municipio;
         QryClientesDIRECCION.Value        := UpperCase(Datos.Clie_Direccion);
         QryClientesNUM_TELEFONICO.Value   := Datos.Clie_Telefono;
         QryClientes.Post;
      DmConexion.AdoConexionBd.CommitTrans;
      Result   :=  1;
   Except
      Result   :=  2;
      DmConexion.AdoConexionBd.RollbackTrans;
   End;
end;


//*** Validacion de un Cliente en la base de datos.
Function TDmGestion_Data.ValidarProdcutoBD(Datos:TControl_Gestion;Producto_Id:String):Boolean;
begin
    QryProductos.Close;
    QryProductos.Parameters[0].Value := Producto_Id;
    QryProductos.Open;

    If ( QryProductos.RecordCount = 1 ) Then
     Begin
         Datos.Pro_Codigo    := QryProductosPRODUCTO.Value;
         Datos.Pro_Categoria := QryProductosCATEGORIA.Value;
         Datos.Pro_Nombre    := QryProductosNOMBRE_PRODUCTO.Value;
         Datos.Pro_Valor     := QryProductosVALOR.Value;
         Result              := True;
     End
       Else
          Begin Result := False; End;
end;
//*** Registro de un Cliente en la base de datos.
Function TDmGestion_Data.RegistrarProducto(Datos:TControl_Gestion;Actividad:String):Currency;
 Var CodProductoNuevo : String;
begin
   Try
     DmConexion.AdoConexionBd.BeginTrans;
     QryProductos.Close;
     QryProductos.Parameters[0].Value := Datos.Pro_Codigo;
     QryProductos.Open;

     If ( Actividad = 'REGISTRAR PRODUCTO' ) Then
      Begin
         QryCuentaProductos.Close;
         QryCuentaProductos.Open;
         CodProductoNuevo :=  Datos.Pro_Categoria + FormatFloat('0000000000',QryCuentaProductosCANT_PRODUCTOS.Value+1);
         QryProductos.Insert;
         QryProductosPRODUCTO.Value         :=  CodProductoNuevo;
      End Else Begin  QryClientes.Edit;  End;
         QryProductosCATEGORIA.Value        := Datos.Pro_Categoria;
         QryProductosNOMBRE_PRODUCTO.Value  := UpperCase(Datos.Pro_Nombre);
         QryProductosVALOR.Value            := Datos.Pro_Valor;
         QryProductos.Post;
      DmConexion.AdoConexionBd.CommitTrans;
      Result   :=  1;
   Except
      Result   :=  2;
      DmConexion.AdoConexionBd.RollbackTrans;
   End;
end;




end.
